import tkinter as tk
from PIL import Image, ImageTk
import cv2
import numpy as np

Captura = None
capture = None

# --- Ventana ---
ventana = tk.Tk()
ventana.geometry("500x400")
LImagen = tk.Label(ventana, background="gray")
LImagen.place(x=50, y=50, width=300, height=200)

# --- Spinboxes para la zona destino ---
x1 = tk.Spinbox(ventana, from_=0, to=299)
y1 = tk.Spinbox(ventana, from_=0, to=239)
x2 = tk.Spinbox(ventana, from_=1, to=300)
y2 = tk.Spinbox(ventana, from_=1, to=240)
x1.place(x=10, y=10); y1.place(x=60, y=10)
x2.place(x=110, y=10); y2.place(x=160, y=10)

# --- Abrir cámara ---
capture = cv2.VideoCapture(0)
if not capture.isOpened():
    print("No se pudo abrir la cámara")
else:
    print("Cámara iniciada")

# --- Configurar SimpleBlobDetector para esferas blancas ---
params = cv2.SimpleBlobDetector_Params()
params.filterByColor = True
params.blobColor = 255
params.filterByArea = True
params.minArea = 250
params.maxArea = 2000
params.filterByCircularity = True
params.minCircularity = 0.6
detector = cv2.SimpleBlobDetector_create(params)

def detectar_puntos_rojos(frame):
    """
    Detecta puntos rojos en la imagen y devuelve sus centros.
    """
    hsv = cv2.cvtColor(frame, cv2.COLOR_RGB2HSV)
    
    # Rango para rojo (rojo puede abarcar dos rangos en HSV)
    lower_red1 = np.array([0, 100, 100])
    upper_red1 = np.array([10, 255, 255])
    lower_red2 = np.array([160, 100, 100])
    upper_red2 = np.array([179, 255, 255])
    
    mask1 = cv2.inRange(hsv, lower_red1, upper_red1)
    mask2 = cv2.inRange(hsv, lower_red2, upper_red2)
    mask = cv2.bitwise_or(mask1, mask2)
    
    # Limpiar ruido
    kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (5,5))
    mask = cv2.morphologyEx(mask, cv2.MORPH_OPEN, kernel, iterations=2)
    mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel, iterations=2)
    
    # Encontrar contornos
    contornos = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)[0]
    puntos = []
    for c in contornos:
        area = cv2.contourArea(c)
        if area > 10:  # filtrar ruido
            M = cv2.moments(c)
            if M['m00'] != 0:
                cx = int(M['m10']/M['m00'])
                cy = int(M['m01']/M['m00'])
                puntos.append((cx, cy))
    return puntos

def iniciar():
    global Captura, capture, LImagen, x1, y1, x2, y2, detector
    if capture is not None:
        ret, frame = capture.read()
        if ret:
            frame = cv2.resize(frame, (300, 200))
            ImagenCamara = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            Captura = ImagenCamara.copy()

            # --- Normalización LAB ---
            lab = cv2.cvtColor(ImagenCamara, cv2.COLOR_RGB2LAB)
            l, a, b = cv2.split(lab)
            l = cv2.equalizeHist(l)
            lab = cv2.merge((l, a, b))
            ImagenNorm = cv2.cvtColor(lab, cv2.COLOR_LAB2RGB)

            # --- Convertir a gris y suavizar para blob detector ---
            gray = cv2.cvtColor(ImagenNorm, cv2.COLOR_RGB2GRAY)
            gray = cv2.GaussianBlur(gray, (7,7), 0)

            # --- Detectar esferas blancas ---
            keypoints = detector.detect(gray)
            salida = ImagenCamara.copy()
            for kp in keypoints:
                x, y = kp.pt
                r = kp.size / 2
                cv2.circle(salida, (int(x), int(y)), int(r), (0,100,250), 7)

            # --- Detectar puntos rojos ---
            puntos_rojos = detectar_puntos_rojos(ImagenCamara)
            for (cx, cy) in puntos_rojos:
                cv2.circle(salida, (cx, cy), 7, (0,0,255), -1)  # círculo rojo sólido

            # --- Verificar zona destino ---
            try:
                dx1 = int(x1.get()); dy1 = int(y1.get())
                dx2 = int(x2.get()); dy2 = int(y2.get())
                roi = Captura[dy1:dy2, dx1:dx2]
                gray_roi = cv2.cvtColor(roi, cv2.COLOR_RGB2GRAY)
                _, th = cv2.threshold(gray_roi, 200, 255, cv2.THRESH_BINARY)
                porcentaje_no_blanco = 100 - (cv2.countNonZero(th)/th.size*100)
                mensaje = "Destino lleno" if porcentaje_no_blanco>5 else "Destino libre"
                cv2.rectangle(salida, (dx1, dy1), (dx2, dy2), (255,0,0), 2)
                color_msg = (0,0,255) if porcentaje_no_blanco>5 else (0,255,0)
                cv2.putText(salida, mensaje, (dx1, max(0, dy1-10)), cv2.FONT_HERSHEY_SIMPLEX, 1.0, color_msg, 1)
            except Exception:
                pass

            # --- Mostrar imagen en Tkinter ---
            im = Image.fromarray(salida)
            img = ImageTk.PhotoImage(image=im)
            LImagen.configure(image=img)
            LImagen.image = img

            LImagen.after(30, iniciar)
        else:
            print("No se pudo leer frame de la cámara")

# --- Iniciar cámara ---
iniciar()
ventana.mainloop()

